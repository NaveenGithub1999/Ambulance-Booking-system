from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///ambulance_booking.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(15), nullable=False, unique=True)
    email = db.Column(db.String(100), nullable=False, unique=True)
    address = db.Column(db.String(200), nullable=False)

class Ambulance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    number = db.Column(db.String(20), nullable=False, unique=True)
    driver_name = db.Column(db.String(100), nullable=False)
    availability = db.Column(db.Boolean, default=True)

class Booking(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    ambulance_id = db.Column(db.Integer, db.ForeignKey('ambulance.id'), nullable=False)
    status = db.Column(db.String(50), default="Pending")
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# Routes
@app.route('/api/users', methods=['POST'])
def add_user():
    data = request.json
    new_user = User(name=data['name'], phone=data['phone'], email=data['email'], address=data['address'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "User added successfully!"}), 201

@app.route('/api/ambulances', methods=['GET'])
def get_ambulances():
    ambulances = Ambulance.query.filter_by(availability=True).all()
    result = [{"id": a.id, "number": a.number, "driver_name": a.driver_name} for a in ambulances]
    return jsonify(result)

@app.route('/api/bookings', methods=['POST'])
def book_ambulance():
    data = request.json
    ambulance = Ambulance.query.filter_by(id=data['ambulance_id'], availability=True).first()
    if not ambulance:
        return jsonify({"message": "No available ambulance found!"}), 400
    
    new_booking = Booking(user_id=data['user_id'], ambulance_id=data['ambulance_id'])
    ambulance.availability = False  # Mark ambulance as unavailable
    db.session.add(new_booking)
    db.session.commit()
    return jsonify({"message": "Ambulance booked successfully!"}), 201

@app.route('/api/bookings/<int:id>', methods=['GET'])
def get_booking(id):
    booking = Booking.query.get(id)
    if not booking:
        return jsonify({"message": "Booking not found!"}), 404
    return jsonify({
        "id": booking.id,
        "user_id": booking.user_id,
        "ambulance_id": booking.ambulance_id,
        "status": booking.status,
        "created_at": booking.created_at
    })

@app.route('/api/bookings/<int:id>', methods=['PUT'])
def update_booking(id):
    data = request.json
    booking = Booking.query.get(id)
    if not booking:
        return jsonify({"message": "Booking not found!"}), 404
    booking.status = data['status']
    if data['status'] == "Completed":
        ambulance = Ambulance.query.get(booking.ambulance_id)
        ambulance.availability = True  # Mark ambulance as available
    db.session.commit()
    return jsonify({"message": "Booking updated successfully!"})

if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)
